.. Copyright 2015 tsuru-client authors. All rights reserved.
   Use of this source code is governed by a BSD-style
   license that can be found in the LICENSE file.

**tsuru** is the command line utility used by application developers, that
will allow users to create, list, bind and manage apps.

Installing
==========

There are several ways to install `tsuru-client`:

- `Downloading binaries (Mac OS X and Linux)`_
- `Using homebrew (Mac OS X only)`_
- `Using the PPA (Ubuntu only)`_
- `Using AUR (ArchLinux only)`_
- `Build from source (Linux and Mac OS X)`_

Downloading binaries (Mac OS X and Linux)
-----------------------------------------

We provide pre-built binaries for OS X and Linux, only for the amd64
architecture. You can download these binaries directly from the releases page
of the project:

    * tsuru: https://github.com/tsuru/tsuru-client/releases

Using homebrew (Mac OS X only)
------------------------------

If you use Mac OS X and `homebrew <http://mxcl.github.com/homebrew/>`_, you may
use a custom tap to install ``tsuru``. First you need to add the tap:

.. highlight:: bash

::

    $ brew tap tsuru/homebrew-tsuru

Now you can install tsuru:

.. highlight:: bash

::

    $ brew install tsuru

Whenever a new version of any of tsuru's clients is out, you can just run:

.. highlight:: bash

::

    $ brew update
    $ brew upgrade tsuru

For more details on taps, check `homebrew documentation
<https://github.com/Homebrew/homebrew/wiki/brew-tap>`_.

**NOTE:** tsuru requires Go 1.2 or higher. Make sure you have the last version
of Go installed in your system.

Using the PPA (Ubuntu only)
---------------------------

Ubuntu users can install tsuru clients using ``apt-get`` and the `tsuru PPA
<https://launchpad.net/~tsuru/+archive/ppa>`_. You'll need to add the PPA
repository locally and run an ``apt-get update``:

.. highlight:: bash

::

    $ sudo apt-add-repository ppa:tsuru/ppa
    $ sudo apt-get update

Now you can install tsuru's clients:

.. highlight:: bash

::

    $ sudo apt-get install tsuru-client

Using AUR (ArchLinux only)
--------------------------

Archlinux users can build and install tsuru client from AUR repository,
Is needed to have installed `yaourt <http://archlinux.fr/yaourt-en>`_ program.

You can run:


.. highlight:: bash

::

    $ yaourt -S tsuru

Build from source (Linux and Mac OS X)
--------------------------------------

.. note::

    If you're feeling adventurous, you can try it on other systems, like
    FreeBSD, OpenBSD or even Windows. Please let us know about your progress!

`tsuru client source <https://github.com/tsuru/tsuru-client>`_ is written in `Go
<http://golang.org>`_, so before installing tsuru from source, please make sure
you have `installed and configured Go <http://golang.org/doc/install>`_.

With Go installed and configured, you can use ``go get`` to install any of
tsuru's clients:

.. highlight:: bash

::

    $ go get github.com/tsuru/tsuru-client/tsuru

Managing remote tsuru server endpoints
======================================

The target is the **tsuru** server to which all operations will be directed to.

.. highlight:: bash

::

    $ tsuru target-add <label> <address> [--set-current|-s]
    $ tsuru target-list
    $ tsuru target-set <label>
    $ tsuru target-remove <label>

With this set of commands you are be able to add a new labeled target,
set a target for usage, list the added targets and remove a target, respectively.

Check current version
=====================

To see the current version of **tsuru** you should use the `version` command:

.. highlight:: bash

::

    $ tsuru version
    tsuru version 0.14.0.

Authentication
==============

After that, all you need is to create a user and authenticate to start creating
apps and pushing code to them. Use `create-user
<http://godoc.org/github.com/tsuru/tsuru-client/tsuru#hdr-Create_a_user>`_.


.. highlight:: bash

::

    $ tsuru user-create youremail@gmail.com
    $ tsuru login youremail@gmail.com

login
-----

.. highlight:: bash

::

    $ tsuru login [<email>]

Login will ask for the password and check if the user is successfully
authenticated. If so, the token generated by the **tsuru** server will be stored
in ${HOME}/.tsuru_token.

All tsuru actions require the user to be authenticated (except `login` and `version`).

logout
------

.. highlight:: bash

::

    $ tsuru logout

Logout will delete the token file and terminate the session within tsuru server.

Apps
====

Associating your user to a team
-------------------------------

You need to be member of a team to create an app. To create a new team, use
`create-team
<http://godoc.org/github.com/tsuru/tsuru-client/tsuru#hdr-Create_a_new_team_for_the_user>`_:

.. highlight:: bash

::

    $ tsuru team-create teamname

Display the list of available platforms
---------------------------------------

.. highlight:: bash

::

    $ tsuru platform-list

platform-list lists the available platforms. All platforms displayed in this list may be used to create new apps (see app-create).

Display the list of available plans
-----------------------------------

.. highlight:: bash

::

    $ tsuru  plan-list --human
    +-------------+---------+---------+-----------+---------+
    | Name        | Memory  | Swap    | Cpu Share | Default |
    +-------------+---------+---------+-----------+---------+
    | default     | 512 MB  | 1024 MB | 1024      | true    |
    +-------------+---------+---------+-----------+---------+

plan-list lists available plans that can be used when creating an app.

Creating an app
---------------

To create an app, use `app-create
<http://godoc.org/github.com/tsuru/tsuru-client/tsuru#hdr-Create_an_app>`_:

.. highlight:: bash

::

    $ tsuru app-create myblog <platform> [--plan/-p plan_name] [--team/-t team_owner]


The ``platform`` parameter is the name of the platform to be used when creating
the app. This will definer how tsuru understands and executes your app. The list
of available platforms can be found running ``tsuru platform-list``.

The ``--plan`` parameter defines the plan to be used. The plan specifies how
computational resources are allocated to your application. Typically this means
limits for memory and swap usage, and how much cpu share is allocated. The list of
available plans can be found running ``tsuru plan-list``.

If this parameter is not informed, tsuru will choose the plan with the ``default``
flag set to true.

The ``team`` parameter describes which team is responsible for the created app,
this is only needed if the current user belongs to more than one team, in which
case this parameter will be mandatory.

After running successfully the command will return your app's remote url, you
should add it to your git repository:

.. highlight:: bash

::

    $ git remote add tsuru git@tsuru.myhost.com:myblog.git


Listing your apps
-----------------

When your app is ready, you can push to it. To check whether it is ready or
not, you can use `app-list
<http://godoc.org/github.com/tsuru/tsuru-client/tsuru#hdr-List_apps_that_you_have_access_to>`_:

.. highlight:: bash

::

    $ tsuru app-list

This will return something like:

.. highlight:: bash

::

    +-------------+-------------------------+-------------------------------------------+
    | Application | Units State Summary     | Ip                                        |
    +-------------+-------------------------+-------------------------------------------+
    | myblog      | 1 of 1 units in-service | myblog-838381.us-east-1-elb.amazonaws.com |
    +-------------+-------------------------+-------------------------------------------+

Showing app info
----------------

You can also use the `app-info
<http://godoc.org/github.com/tsuru/tsuru-client/tsuru#hdr-Display_information_about_an_app>`_
command to view information of an app. Including the status of the app:

.. highlight:: bash

::

    $ tsuru app-info

This will return something like:

.. highlight:: bash

::

    Application: myblog
    Platform: gunicorn
    Repository: git@githost.com:myblog.git
    Teams: team1, team2
    Units:
    +----------+---------+
    | Unit     | State   |
    +----------+---------+
    | myblog/0 | started |
    | myblog/1 | started |
    +----------+---------+

tsuru uses information from git configuration to guess the name of the app, for
more details, see `"Guessing app names"
<http://godoc.org/github.com/tsuru/tsuru-client/tsuru#hdr-Guessing_app_names>`_
section of tsuru command documentation.

See app's logs
--------------

.. highlight:: bash

::

    $ tsuru app-log [-a/--app appname] [-l/--lines numberOfLines] [-s/--source source] [-f/--follow]

Log will show log entries for an app. These logs are not related to the code of the app itself, but to actions of the app in tsuru server (deployments, restarts, etc.).

The --app flag is optional, see "Guessing app names" section for more details. The --lines flag is optional and by default its value is 10. The --source flag is optional.

Stop the app's application
--------------------------

.. highlight:: bash

::

    $ tsuru app-stop [-a/--app appname]

app-stop will stop the application.

Start the app's application
---------------------------

.. highlight:: bash

::

    $ tsuru app-start [-a/--app appname]

app-start will start the application.

Restart the app's application
-----------------------------

.. highlight:: bash

::

    $ tsuru app-restart [-a/--app appname]

app-restart will restart the application (as defined in Procfile) of the application.

Add new units to the app
------------------------

.. highlight:: bash

::

    $ tsuru unit-add <# of units> [-a/--app appname]

unit-add will add new units (instances) to an app. You need to have access to the app to be able to add new units to it.

Remove units from the app
-------------------------

.. highlight:: bash

::

    $ tsuru unit-remove <# of units> [-a/--app appname]

unit-remove will remove units (instances) from an app. You need to have access to the app to be able to remove units from it.

Swap the routing between two apps
---------------------------------

.. highlight:: bash

::

    $ tsuru app-swap <app1> <app2>

app-swap will swap the routing between two apps enabling blue/green deploy, zero downtime and make the rollbacks easier.

Allow a team to access an app
-----------------------------

.. highlight:: bash

::

    $ tsuru app-grant <team-name> [-a/--app appname]

app-grant will allow a team to access an app. You need to be a member of a team that has access to the app to allow another team to access it.

Revoke from a team access to an app
-----------------------------------

.. highlight:: bash

::

    $ tsuru app-revoke <team-name> [-a/--app appname]

app-revoke will revoke the permission to access an app from a team. You need to have access to the app to revoke access from a team.

An app cannot be orphaned, so it will always have at least one authorized team.

Public Keys
===========

You can try to push now, but you'll get a permission error, because you haven't
pushed your key yet.

.. highlight:: bash

::

    $ tsuru key-add

This will search for a `id_rsa.pub` file in ~/.ssh/, if you don't have a
generated key yet, you should generate one before running this command.

If you have a public key in other format (for example, DSA), you can also give
the public key file to `key-add
<http://godoc.org/github.com/tsuru/tsuru-client/tsuru#hdr-Add_SSH_public_key_to_tsuru_s_git_server>`_:

.. highlight:: bash

::

    $ tsuru key-add $HOME/.ssh/id_dsa.pub

After your key is added, you can push your application to your cloud:

.. highlight:: bash

::

    $ git push tsuru master

Running commands
================

After that, you can check your app's url in the browser and see your app there.
You'll probably need to run migrations or other deploy related commands. To run
a single command, you should use the command `run
<http://godoc.org/github.com/tsuru/tsuru-client/tsuru#hdr-Run_an_arbitrary_command_in_the_app_machine>`_:

.. highlight:: bash

::

    $ tsuru run "python manage.py syncdb && python manage.py migrate"

Services
========

List available services and instances
-------------------------------------

.. highlight:: bash

::

    $ tsuru service-list
    +----------+-----------+
    | Services | Instances |
    +----------+-----------+
    | mysql    |           |
    +----------+-----------+

service-list will retrieve and display a list of services that the user has access to. If the user has any instance of services, it will be displayed by this command too.

Create a new service instance
-----------------------------

.. highlight:: bash

::

    $ tsuru service-add <servicename> <serviceinstancename> [plan] [-t/--owner-team <team>]

service-add creates a new service instance.

Remove a service instance
-------------------------

.. highlight:: bash

::

    $ tsuru service-remove <serviceinstancename> [--assume-yes]

service-remove will destroy a service instance. It can't remove a service instance that is bound to an app, so before remove a service instance, make sure there is no apps bound to it (see "service-info" command).

Display information about a service
-----------------------------------

    $ tsuru service-info <service-name>

service-info will display a list of all instances of a given service (that the user has access to), and apps bound to these instances.

.. highlight:: bash

    $ tsuru service-info mysql
    Info for "mysql"
    +-----------+-------+
    | Instances | Apps  |
    +-----------+-------+
    | newmysql  |       |
    +-----------+-------+
    $ tsuru bind newmysql myapp
    ...
    $ tsuru service-info mysql
    Info for "mysql"
    +-----------+-------+
    | Instances | Apps  |
    +-----------+-------+
    | newmysql  | myapp |
    +-----------+-------+

Check if a service instance is up
---------------------------------

.. highlight:: bash

::

    $ tsuru service-status <instance-name>

service-status will display the status of the given service instance. For now, it checks only if the instance is "up" (receiving connections) or "down" (refusing connections).

Display the documentation of a service
--------------------------------------

.. highlight:: bash

::

    $ tsuru service-doc <service-name>

service-doc will display the documentation of a service.

Bind an application to a service instance
-----------------------------------------

.. highlight:: bash

::

    $ tsuru service-bind <service_instance_name> [--app appname]

service-bind will bind an application to a service instance (see service-add for more details on how to create a service instance).

When binding an application to a service instance, tsuru will add new environment variables to the app. All environment variables exported by bind will be private (not accessible via env-get).

Unbind an application from a service instance
---------------------------------------------

.. highlight:: bash

::

    $ tsuru service-unbind <service_instance_name> [--app appname]

service-unbind will unbind an application from a service instance. After unbinding, the instance will not be available anymore. For example, when unbinding an application from a MySQL service, the app would lose access to the database.

Guessing app names
==================

In some app-related commands (app-remove, app-info, app-grant, app-revoke,
log, run, restart, env-get, env-set, env-unset, bind and unbind), there is an
optional parameter --app, used to specify the name of the app.

The --app parameter is optional, if omitted, tsuru will try to "guess" the
name of the app based in the configuration of the git repository. It will try
to find a remove labeled "tsuru", and parse its url.

For example, if the file ".git/config" in you git repository contains the
following remote declaration:

.. highlight:: bash

::

    [remote "tsuru"]
    url = git@tsuruhost.com:gopher.git
    fetch = +refs/heads/*:refs/remotes/tsuru/*

When you run "tsuru app-info" without specifying the app, tsuru would display
information for the app "gopher".

Token
=====

tsuru users have a API key that enables authentication that don't required interaction.
The key never expires, to regenerate the API key you should use the command ``token-regenerate``.

.. highlight:: bash

::

    $ tsuru token-regenerate

To view the current key just use the command ``token-show``.

.. highlight:: bash

::

    $ tsuru token-show

Environment variables
=====================

All configurations in tsuru are handled by the use of environment variables.
If you need to connect with a third party service, e.g. twitter’s API,
you are probably going to need some extra configurations, like client_id.
In tsuru, you can export those as environment variables,
visible only by your application’s processes.

env-set
-------

.. highlight:: bash

::

    $ tsuru env-set <NAME=value> [NAME=value] ... [-a/--app appname]

This command sets environment variables for an app.

env-get
-------

.. highlight:: bash

::

    $ tsuru env-get [-a/--app appname] [ENVIRONMENT_VARIABLE1] [ENVIRONMENT_VARIABLE2] ...

This command retrieves environment variables for an app.

env-unset
---------

.. highlight:: bash

::

    $ tsuru env-unset <ENVIRONMENT_VARIABLE1> [ENVIRONMENT_VARIABLE2] ... [ENVIRONMENT_VARIABLEN] [-a/--app appname]

This command unsets environment variables for an app.

Plugin management
=================

Installing a plugin
-------------------

Let's install a plugin. There are two ways to install.  The first way is to
move your plugin to ``$HOME/.tsuru/plugins``.  The other way is to use ``tsuru
plugin-install`` command.


.. highlight:: bash

::

    $ tsuru plugin-install <plugin-name> <plugin-url>

``tsuru plugin-install`` will download the plugin file to
``$HOME/.tsuru/plugins``.  The syntax for this command is:

Listing installed plugins
-------------------------

.. highlight:: bash

::

    $ tsuru plugin-list
    plugin1
    plugin2

``plugin-list`` lists all installed plugins.

Executing a plugin
------------------

To execute a plugin just follow this pattern ``tsuru <plugin-name> <args>``:

.. highlight:: bash

::

    $ tsuru <plugin-name>
    <plugin-output>

Removing a plugin
-----------------

To remove a plugin just use the ``tsuru plugin-remove`` command passing the
name of the plugin as argument:

.. highlight:: bash

::

    $ tsuru plugin-remove <plugin-name>
    Plugin "<plugin-name>" successfully removed!
